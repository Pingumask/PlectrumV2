const { MessageEmbed } = require('discord.js');
const cooldown = {};

module.exports = {
    name: 'sondage',
    category: 'fun',
    description: 'Cr√©e un sondage',
    utilisation: '{prefix}sondage question [r√©ponses] ([emotes])',
    options:[
        {
            name:'question',
            description:'La question pos√©e par le sondage',
            type:3,//type 3 = STRING
            required:true,            
        },
        {
            name:'r√©ponse1',
            description:'Premi√®re option',
            type:3,//type 3 = STRING
            required:true,            
        },
        {
            name:'r√©ponse2',
            description:'Deuxi√®me option',
            type:3,//type 3 = STRING
            required:true,            
        },
        {
            name:'r√©ponse3',
            description:'Troisi√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'r√©ponse4',
            description:'Quatri√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'r√©ponse5',
            description:'Cinqui√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'r√©ponse6',
            description:'Sixi√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'r√©ponse7',
            description:'Septi√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'r√©ponse8',
            description:'Huit√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'emote1',
            description:' Emote pour la Premi√®re option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'emote2',
            description:' Emote pour la Deuxi√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'emote3',
            description:' Emote pour la Troisi√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'emote4',
            description:' Emote pour la Quatri√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'emote5',
            description:' Emote pour la Cinqui√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'emote6',
            description:' Emote pour la Sixi√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'emote7',
            description:' Emote pour la Septi√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
        {
            name:'emote8',
            description:' Emote pour la Huit√®me option',
            type:3,//type 3 = STRING
            required:false,            
        },
    ],
    execute: async (client, interaction)=>{
        //Gestion du cooldown
        if (interaction.guild){
            const TIMER = 300000;
            if (cooldown[interaction.guild.id]===undefined) cooldown[interaction.guild.id] ={}
            if(cooldown[interaction.guild.id][interaction.member.id]){
                let end = new Date(cooldown[interaction.guild.id][interaction.member.id]);
                return await interaction.reply({ content: `Tu fais √ßa trop souvent, attends jusqu'√† ${end.toLocaleTimeString()} avant de lancer un nouveau sondage`, ephemeral: true });
            }
            cooldown[interaction.guild.id][interaction.member.id] = Date.now() + TIMER;
            setTimeout(()=>{
                delete cooldown[interaction.guild.id][interaction.member.id];
            }, TIMER);
        }

        //R√©cup√©ration des parametres
        let question = interaction.options.getString('question');

        let options = {
            1:interaction.options.getString('r√©ponse1'),
            2:interaction.options.getString('r√©ponse2'),
            3:interaction.options.getString('r√©ponse3'),
            4:interaction.options.getString('r√©ponse4'),
            5:interaction.options.getString('r√©ponse5'),
            6:interaction.options.getString('r√©ponse6'),
            7:interaction.options.getString('r√©ponse7'),
            8:interaction.options.getString('r√©ponse8'),
        };

        let defaultEmotes = {
            1:"üá¶",
            2:"üáß",
            3:"üá®",
            4:"üá©",
            5:"üá™",
            6:"üá´",
            7:"üá¨",
            8:"üá≠",
        }

        let emotes = {
            1:interaction.options.getString('emote1') ?? "üá¶",
            2:interaction.options.getString('emote2') ?? "üáß",
            3:interaction.options.getString('emote3') ?? "üá®",
            4:interaction.options.getString('emote4') ?? "üá©",
            5:interaction.options.getString('emote5') ?? "üá™",
            6:interaction.options.getString('emote6') ?? "üá´",
            7:interaction.options.getString('emote7') ?? "üá¨",
            8:interaction.options.getString('emote8') ?? "üá≠",
        }

        //S√©curisation de la longueur des parametres
        if (question.length > 300) return await interaction.reply({ content: `La question est trop longue`, ephemeral: true });
        for(num=1;num<=8;num++){
            if(options[num] !== null && options[num].length>200) return await interaction.reply({ content: `La r√©ponse ${num} est trop longue`, ephemeral: true });
        }

        //Envoi de la question
        let messageEmbed = new MessageEmbed()
            .setTitle(question)
            .setDescription("");
        await interaction.reply({embeds:[messageEmbed]});
        const poll = await interaction.fetchReply();

        //Ajout des r√©ponses et r√©actions
        for(num=1;num<=8;num++){
            if(options[num] !== null){
                try{
                    await poll.react(emotes[num]);
                    messageEmbed.description += `\n${emotes[num]}:${options[num]}`;
                }
                catch(error){
                    try{
                        await poll.react(`\\${emotes[num]}`);
                        messageEmbed.description += `\n${emotes[num]}:${options[num]}`;
                        }
                        catch(error){
                        console.warn(`Emote ${emotes[num]} inutilisable`);
                        await poll.react(defaultEmotes[num]);
                        messageEmbed.description += `\n${defaultEmotes[num]} ${options[num]}`;
                    }
                }                
            }
        }
        interaction.editReply({embeds:[messageEmbed]});
    }
};
